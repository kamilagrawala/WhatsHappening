package com.whatshappening;

// Google Imports
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.ErrorDialogFragment;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;

// Android Imports
import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.IntentSender;
import android.location.Geocoder;
import android.location.Location;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.Toast;
import android.support.v4.app.FragmentManager;

@SuppressLint("ValidFragment")
public class AddEvents extends Fragment {
	// Class Variables
	ProgressBar mActivityIndicator;
	rookWork rW = new rookWork();
	LocationClient mLocationClient = rW.mLocationClient;
	
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.add_events, container, false);
		mActivityIndicator = (ProgressBar) rootView
				.findViewById(R.id.pbHeaderProgress);
		mActivityIndicator.setVisibility(View.INVISIBLE);
		// Location currentLocation = mLocationClient.getLastLocation();
		rootView.findViewById(R.id.button1).setOnClickListener(
				new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						getAddress(v);
						EditText geoLoc = (EditText) getActivity()
								.findViewById(R.id.tLocation);
						geoLoc.setText("lExectution");
					}

				});
		return rootView;
	}
	
	public void onStart() {
		super.onStart();
		mLocationClient.connect();
	}

	public void onStop() {
		if (mLocationClient.isConnected()) {
			mLocationClient.disconnect();
			super.onStop();
		}
	}

	public void getAddress(View v) {
		// In Gingerbread and later, use Geocoder.isPresent() to see if a
		// geocoder is available.
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD
				&& !Geocoder.isPresent()) {
			// No geocoder is present. Issue an error message
			Toast.makeText(getActivity(), R.string.no_geocoder_available,
					Toast.LENGTH_LONG).show();
			return;
		}

		if (rW.servicesConnected()) {
			// Get the current location
			Location currentLocation = mLocationClient.getLastLocation();

			// Turn the indefinite activity indicator on
			mActivityIndicator.setVisibility(View.VISIBLE);

			// Start the background task
			GetAddressTask getAddressTask = new GetAddressTask(getActivity());
			getAddressTask.execute(currentLocation);
			// (new
			// GetAddressTask.GetAddressTask(this)).execute(currentLocation);
		} else {
			Toast.makeText(getActivity(), "servicesConnected() == false",
					Toast.LENGTH_SHORT).show();
		}

	}

	public class rookWork extends FragmentActivity implements
			GooglePlayServicesClient.ConnectionCallbacks,
			GooglePlayServicesClient.OnConnectionFailedListener {
		LocationClient mLocationClient = new LocationClient(this,this,this);
		
		@Override
		public void onConnected(Bundle connectionHint) {
			// TODO Auto-generated method stub
			Toast.makeText(getApplicationContext(), "Connected!",
					Toast.LENGTH_SHORT).show();
		}

		@Override
		public void onDisconnected() {
			// TODO Auto-generated method stub
			Toast.makeText(getApplicationContext(), "Disconnected!",
					Toast.LENGTH_SHORT).show();
		}

		@Override
		public void onConnectionFailed(ConnectionResult connectionResult) {

			/*
			 * Google Play services can resolve some errors it detects. If the
			 * error has a resolution, try sending an Intent to start a Google
			 * Play services activity that can resolve error.
			 */
			if (connectionResult.hasResolution()) {
				try {

					// Start an Activity that tries to resolve the error
					connectionResult
							.startResolutionForResult(
									this,
									LocationUtils.CONNECTION_FAILURE_RESOLUTION_REQUEST);

					/*
					 * Thrown if Google Play services canceled the original
					 * PendingIntent
					 */

				} catch (IntentSender.SendIntentException e) {

					// Log the error
					e.printStackTrace();
				}
			} else {

				// If no resolution is available, display a dialog to the user
				// with the error.
				showErrorDialog(connectionResult.getErrorCode());
			}
		}

		private boolean servicesConnected() {
			// Check that Google Play services is available
			int resultCode = GooglePlayServicesUtil
					.isGooglePlayServicesAvailable(this);

			// If Google Play services is available
			if (ConnectionResult.SUCCESS == resultCode) {
				// In debug mode, log the status
				Log.d(LocationUtils.APPTAG,
						getString(R.string.play_services_available));

				// Continue
				return true;
				// Google Play services was not available for some reason
			} else {
				// Display an error dialog
				Dialog dialog = GooglePlayServicesUtil.getErrorDialog(
						resultCode, this, 0);
				if (dialog != null) {
					ErrorDialogFragment errorFragment = new ErrorDialogFragment();
					errorFragment.setDialog(dialog);
					errorFragment.show(getSupportFragmentManager(),
							LocationUtils.APPTAG);
				}
				return false;
			}
		}

		private void showErrorDialog(int errorCode) {

			// Get the error dialog from Google Play services
			Dialog errorDialog = GooglePlayServicesUtil.getErrorDialog(
					errorCode, this,
					LocationUtils.CONNECTION_FAILURE_RESOLUTION_REQUEST);

			// If Google Play services can provide an error dialog
			if (errorDialog != null) {

				// Create a new DialogFragment in which to show the error dialog
				ErrorDialogFragment errorFragment = new ErrorDialogFragment();

				// Set the dialog in the DialogFragment
				errorFragment.setDialog(errorDialog);

				// Show the error dialog in the DialogFragment
				errorFragment.show(getSupportFragmentManager(),
						LocationUtils.APPTAG);
			}
		}

		/**
		 * Define a DialogFragment to display the error dialog generated in
		 * showErrorDialog.
		 */
		public class ErrorDialogFragment extends DialogFragment {

			// Global field to contain the error dialog
			private Dialog mDialog;

			/**
			 * Default constructor. Sets the dialog field to null
			 */
			@SuppressLint("ValidFragment")
			public ErrorDialogFragment() {
				super();
				mDialog = null;
			}

			/**
			 * Set the dialog to display
			 * 
			 * @param dialog
			 *            An error dialog
			 */
			public void setDialog(Dialog dialog) {
				mDialog = dialog;
			}

			/*
			 * This method must return a Dialog to the DialogFragment.
			 */
			public Dialog onCreateDialog(Bundle savedInstanceState) {
				return mDialog;
			}
		}
	}
}
