package com.whatshappening;

// Google Imports
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.ErrorDialogFragment;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;

// Android Imports
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentSender;
import android.location.Geocoder;
import android.location.Location;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.Toast;
import android.support.v4.app.FragmentManager;



public class AddEvents extends Fragment implements
		GooglePlayServicesClient.ConnectionCallbacks,
		GooglePlayServicesClient.OnConnectionFailedListener, AsyncResponse {
	// Class Variables
	private ProgressDialog pd;
	private LocationClient mLocationClient;
	private FragmentActivity myContext;
	private String resultString;

	public String LatLng = null;
	public EditText locationAddress = null;
	public Double Lat = null;
	public Double Lng = null;

	public AddEvents() {

	}

	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.add_events, container, false);
		locationAddress = (EditText) rootView.findViewById(R.id.tLocation);
		mLocationClient = new LocationClient(getActivity(), this, this);
		rootView.findViewById(R.id.locButton).setOnClickListener(
				new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						pd = ProgressDialog.show(getActivity(), "",
								"Finding you!!!", false);
						getAddress(v);
						
					}

				});

		rootView.findViewById(R.id.shButton).setOnClickListener(
				new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						EventMap em = new EventMap();
						if ((Lat != null) && (Lng != null)) {
							em.latLong = LatLng;
							em.lat = Lat;
							em.lng = Lng;
							Toast.makeText(getActivity(), em.latLong,
									Toast.LENGTH_SHORT).show();
						} else {
							Toast.makeText(getActivity(),
									"No location was found", Toast.LENGTH_SHORT)
									.show();
						}
					}
				});

		return rootView;
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent intent) {

		// Choose what to do based on the request code
		switch (requestCode) {

		// If the request code matches the code sent in onConnectionFailed
		case LocationUtils.CONNECTION_FAILURE_RESOLUTION_REQUEST:

			switch (resultCode) {
			// If Google Play services resolved the problem
			case Activity.RESULT_OK:

				// Log the result
				Log.d(LocationUtils.APPTAG, getString(R.string.resolved));

				// Display the result
				Toast.makeText(getActivity(), R.string.connected,
						Toast.LENGTH_SHORT).show();
				Toast.makeText(getActivity(), R.string.resolved,
						Toast.LENGTH_SHORT).show();
				break;

			// If any other result was returned by Google Play services
			default:
				// Log the result
				Log.d(LocationUtils.APPTAG, getString(R.string.no_resolution));

				// Display the result
				Toast.makeText(getActivity(), R.string.disconnected,
						Toast.LENGTH_SHORT).show();
				Toast.makeText(getActivity(), R.string.no_resolution,
						Toast.LENGTH_SHORT).show();
				break;
			}

			// If any other request code was received
		default:
			// Report that this Activity received an unknown requestCode
			Log.d(LocationUtils.APPTAG,
					getString(R.string.unknown_activity_request_code,
							requestCode));

			break;
		}
	}

	public void onStart() {
		super.onStart();
		mLocationClient.connect();
	}

	public void onStop() {
		if (mLocationClient.isConnected()) {
			mLocationClient.disconnect();

		}
		super.onStop();
	}

	@Override
	public void onAttach(Activity activity) {
		myContext = (FragmentActivity) activity;
		super.onAttach(activity);
	}

	public void onConnected(Bundle connectionHint) {
		Toast.makeText(getActivity(), "Connected!", Toast.LENGTH_SHORT).show();
	}

	public void onDisconnected() {
		Toast.makeText(getActivity(), "Disconnected!", Toast.LENGTH_SHORT)
				.show();
	}
	
	public void onConnectionFailed(ConnectionResult connectionResult) {

		/*
		 * Google Play services can resolve some errors it detects. If the error
		 * has a resolution, try sending an Intent to start a Google Play
		 * services activity that can resolve error.
		 */
		if (connectionResult.hasResolution()) {
			try {

				// Start an Activity that tries to resolve the error
				connectionResult.startResolutionForResult(getActivity(),
						LocationUtils.CONNECTION_FAILURE_RESOLUTION_REQUEST);

				/*
				 * Thrown if Google Play services canceled the original
				 * PendingIntent
				 */

			} catch (IntentSender.SendIntentException e) {

				// Log the error
				e.printStackTrace();
			}
		} else {

			// If no resolution is available, display a dialog to the user
			// with the error.
			showErrorDialog(connectionResult.getErrorCode());
		}
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
	}

	@Override
	public void processFinished(String output) {
		resultString = output;

	}

	public void getAddress(View v) {
		// In Gingerbread and later, use Geocoder.isPresent() to see if a
		// geocoder is available.
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD
				&& !Geocoder.isPresent()) {
			// No geocoder is present. Issue an error message
			Toast.makeText(getActivity(), R.string.no_geocoder_available,
					Toast.LENGTH_LONG).show();
			return;
		}

		if (servicesConnected()) {
			// Get the current location
			Location currentLocation = mLocationClient.getLastLocation();
			Lat = currentLocation.getLatitude();
			Lng = currentLocation.getLongitude();
			LatLng = Double.toString(Lat) + "," + Double.toString(Lng);
			// Toast.makeText(getActivity(), LatLng, 0).show();

			// Turn the indefinite activity indicator on
			// Start the background task
			GetAddressTask getAddressTask = new GetAddressTask(getActivity(),
					locationAddress, pd);
			getAddressTask.delegate = this;
			getAddressTask.execute(currentLocation);

		} else {
			Toast.makeText(getActivity(), "servicesConnected() == false",
					Toast.LENGTH_SHORT).show();
		}
	}

	private boolean servicesConnected() {
		// Check that Google Play services is available
		int resultCode = GooglePlayServicesUtil
				.isGooglePlayServicesAvailable(getActivity());

		// If Google Play services is available
		if (ConnectionResult.SUCCESS == resultCode) {
			// In debug mode, log the status
			Log.d(LocationUtils.APPTAG,
					getString(R.string.play_services_available));

			// Continue
			return true;
			// Google Play services was not available for some reason
		} else {
			// Display an error dialog
			Dialog dialog = GooglePlayServicesUtil.getErrorDialog(resultCode,
					getActivity(), 0);
			if (dialog != null) {
				ErrorDialogFragment errorFragment = new ErrorDialogFragment();
				errorFragment.setDialog(dialog);
				errorFragment.show(myContext.getSupportFragmentManager(),
						LocationUtils.APPTAG);
			}
			return false;
		}
	}

	private void showErrorDialog(int errorCode) {

		// Get the error dialog from Google Play services
		Dialog errorDialog = GooglePlayServicesUtil.getErrorDialog(errorCode,
				getActivity(),
				LocationUtils.CONNECTION_FAILURE_RESOLUTION_REQUEST);

		// If Google Play services can provide an error dialog
		if (errorDialog != null) {

			// Create a new DialogFragment in which to show the error dialog
			ErrorDialogFragment errorFragment = new ErrorDialogFragment();

			// Set the dialog in the DialogFragment
			errorFragment.setDialog(errorDialog);

			// Show the error dialog in the DialogFragment
			errorFragment.show(myContext.getSupportFragmentManager(),
					LocationUtils.APPTAG);
		}
	}

	/**
	 * Define a DialogFragment to display the error dialog generated in
	 * showErrorDialog.
	 */
	@SuppressLint("ValidFragment")
	public class ErrorDialogFragment extends DialogFragment {

		// Global field to contain the error dialog
		private Dialog mDialog;

		/**
		 * Default constructor. Sets the dialog field to null
		 */
		@SuppressLint("ValidFragment")
		public ErrorDialogFragment() {
			super();
			mDialog = null;
		}

		/**
		 * Set the dialog to display
		 * 
		 * @param dialog
		 *            An error dialog
		 */
		public void setDialog(Dialog dialog) {
			mDialog = dialog;
		}

		/*
		 * This method must return a Dialog to the DialogFragment.
		 */
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			return mDialog;
		}
	}
}
