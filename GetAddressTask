package com.whatshappening;

/* 
 * Google Imports
 */

/*
 *  Android Imports
 */
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import android.os.AsyncTask;
import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

public class GetAddressTask extends AsyncTask<Location, Void, String>{
	private Context mContext;
	private String addressText;
	public AsyncResponse delegate = null;
	public AddEvents addEvents;
	EditText ed;
	ProgressDialog pd;

	public GetAddressTask(Context context, EditText ed, ProgressDialog pd) {
		super();
		mContext = context;
		this.ed = ed;
		this.pd = pd;
	}

	@Override
	protected String doInBackground(Location... params) {
		/*
		 * Get a new geocoding service instance, set for localized addresses.
		 * This example uses android.location.Geocoder, but other geocoders that
		 * conform to address standards can also be used.
		 */
		pd.show();		
		Geocoder geocoder = new Geocoder(mContext, Locale.getDefault());
		
		// Get the current location from the input parameter list
		Location location = params[0];

		// Create a list to contain the result address
		List<Address> addresses = null;

		// Try to get an address for the current location. Catch IO or network
		// problems.
		try {

			/*
			 * Call the synchronous getFromLocation() method with the latitude
			 * and longitude of the current location. Return at most 1 address.
			 */
			addresses = geocoder.getFromLocation(location.getLatitude(),
					location.getLongitude(), 1);

			// Catch network or other I/O problems.
		} catch (IOException exception1) {

			// Log an error and return an error message
			Log.e(LocationUtils.APPTAG,
					mContext.getString(R.string.IO_Exception_getFromLocation));

			// print the stack trace
			exception1.printStackTrace();

			// Return an error message
			return (mContext.getString(R.string.IO_Exception_getFromLocation));

			// Catch incorrect latitude or longitude values
		} catch (IllegalArgumentException exception2) {

			// Construct a message containing the invalid arguments
			String errorString = mContext.getString(
					R.string.illegal_argument_exception,
					location.getLatitude(), location.getLongitude());
			// Log the error and print the stack trace
			Log.e(LocationUtils.APPTAG, errorString);
			exception2.printStackTrace();

			//
			return errorString;
		}
		// If the reverse geocode returned an address
		if (addresses != null && addresses.size() > 0) {

			// Get the first address
			Address address = addresses.get(0);

			// Format the first line of address
			addressText = mContext.getString(
					R.string.address_output_string,

					// If there's a street address, add it
					address.getMaxAddressLineIndex() > 0 ? address
							.getAddressLine(0) : "",

					// Locality is usually a city
					address.getLocality(),

					// The country of the address
					address.getCountryName());

			// Return the text
			return addressText;

			// If there aren't any addresses, post a message
		} else {
			return mContext.getString(R.string.no_address_found);
		}
	}
	
	protected void onPostExecute(String  result) {
		delegate.processFinished(result);
		ed.setText(result);	
		pd.hide();
	}

}
